name: Build and test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types: [created]
env:
  SWIG_VERSION: '4.0.2'
  NUMPY_VERSION: '1.18.0'
  FAISS_LIBRARY_SUFFIX: ''
  FAISS_ENABLE_GPU: 'OFF'
  TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
jobs:
  build_osx:
    runs-on: macos-latest
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install Homebrew packages
        run: |
          brew install cmake swig libomp
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Build Generic
        run: |
          FAISS_OPT_LEVEL=generic make build_jni
      - name: Build AVX2
        run: |
          FAISS_OPT_LEVEL=avx2 make build_jni
      - name: Build Java
        run: |
          make build_java_only
      - name: test
        run: |
          make test_java_only
      - name: Upload jni library
        uses: actions/upload-artifact@v2
        with:
          name: jni_macos
          path: |
            src/main/resources/
      - name: Upload swig java file
        uses: actions/upload-artifact@v2
        with:
          name: swig_macos
          path: |
            src/main/java/com/vectorsearch/faiss/swig/

  build_linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      matrix:
        cuda:
          - false
        opt:
          - 'generic'
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Set optimization level
      if: matrix.opt != 'generic'
      run: |
        echo "FAISS_OPT_LEVEL=${{ matrix.opt }}" >> $GITHUB_ENV
        echo "FAISS_LIBRARY_SUFFIX=_${{ matrix.opt }}" >> $GITHUB_ENV
    - name: Install build dependency
      run: |
        sed -i 's/mirrorlist=https/mirrorlist=http/' /etc/yum.repos.d/epel.repo
        yum install -y \
            openblas-devel \
            openblas-static \
            pcre-devel \
            java-1.8.0-openjdk \
            java-1.8.0-openjdk-devel \
            maven
    - name: Download and install swig
      run: |
        curl -fsSLO --retry 3 http://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz
        tar xzf swig-${SWIG_VERSION}.tar.gz
        cd swig-${SWIG_VERSION}
        ./configure
        make -j4
        make install

    - name: Build Generic
      run: |
        FAISS_OPT_LEVEL=generic make build_jni
    - name: Build AVX2
      run: |
        FAISS_OPT_LEVEL=avx2 make build_jni
    - name: Build Java
      run: |
        make build_java_only
    - name: test
      run: |
        make test_java_only
    - name: Upload jni library
      uses: actions/upload-artifact@v2
      with:
        name: jni_linux
        path: |
          src/main/resources/
    - name: Upload swig java file
      uses: actions/upload-artifact@v2
      with:
        name: swig_linux
        path: |
          src/main/java/com/vectorsearch/faiss/swig/

  deploy:
    needs: [build_linux, build_osx]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cuda:
          - false
        opt:
          - 'generic'
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Download artifacts
      uses: actions/download-artifact@v2
    - name: Move to resources folders
      run: |
        mkdir -p src/main/resources/
        mkdir -p src/main/java/com/vectorsearch/faiss/swig/
        mv jni_linux/* src/main/resources/.
        mv jni_macos/* src/main/resources/.
        mv swig_linux/* src/main/java/com/vectorsearch/faiss/swig/.
    - name: Build
      run: |
          make build_java_only
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
          name: cross_build_jar
          path: |
            target/JFaiss-CPU-*.jar
    - name: Release Maven package
      uses: samuelmeuli/action-maven-publish@v1
      if: ${{ github.event_name == 'release' }}
      with:
        gpg_private_key: ${{ secrets.gpg_private_key }}
        gpg_passphrase: ${{ secrets.gpg_passphrase }}
        nexus_username: ${{ secrets.nexus_username }}
        nexus_password: ${{ secrets.nexus_password }}
      env:
        GPG_TTY: $(tty)
